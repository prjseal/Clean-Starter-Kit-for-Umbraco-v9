@inherits UmbracoViewPage<BlockListItem>
@using Umbraco.Cms.Core.Models.Blocks
@using Clean.Core.Extensions

@{
    var row = Model.Content as ImageCarouselRow;
    var settings = Model.Settings as ImageCarouselRowSettings;
    if (settings?.Hide ?? false) { return; }
    if (row.Images == null || !row.Images.Any()) { return; }

    var spacingClasses = "";
    if (Model.Settings is ISpacingProperties spacing)
    {
        spacingClasses = Clean.Core.Helpers.SpacingHelper.GetSpacingClasses(spacing.PaddingTop, spacing.PaddingBottom, spacing.PaddingLeft, spacing.PaddingRight, spacing.MarginTop, spacing.MarginBottom, spacing.MarginLeft, spacing.MarginRight);
    }

    SmidgeHelper.RequiresCss("~/clean-assets/css/swiffy-slider.min.css");
    SmidgeHelper.RequiresJs("~/clean-assets/js/swiffy-slider.min.js");
}

<div class="row clearfix @(spacingClasses)">
    <div class="col-md-12 column">
        <div class="swiffy-slider slider-item-reveal slider-nav-round slider-item-ratio slider-item-ratio-21x9" id="slider-@(row.Key.ToString())">
            <ul class="slider-container">
                @foreach (var item in row.Images)
                {
                    <li><img src="@item.Url()" loading="lazy" alt="@item.Content.GetAltText()"></li>
                }
            </ul>

            <button type="button" class="slider-nav" aria-label="Go left"></button>
            <button type="button" class="slider-nav slider-nav-next" aria-label="Go right"></button>

            <div class="slider-indicators slider-indicators-square d-none d-md-flex">
                <button class="active" aria-label="Go to slide"></button>
                @if (row.Images.Count() > 1)
                {
                    foreach (var image in row.Images.Skip(1))
                    {
                        <button aria-label="Go to slide"></button>
                    }
                }
            </div>

            <div class="slider-indicators slider-indicators-sm slider-indicators-dark slider-indicators-round d-md-none slider-indicators-highlight">
                <button class="active" aria-label="Go to slide"></button>
                @if (row.Images.Count() > 1)
                {
                    foreach (var image in row.Images.Skip(1))
                    {
                        <button aria-label="Go to slide"></button>
                    }
                }
            </div>
        </div>
    </div>
</div>



@{
    var count = 0;
    var maxItems = 5;
    int buttons = 0;
    var guid = Guid.NewGuid().ToString();
    var carouselId = "carousel" + guid; // create a unique id for each carousel
}

<div id="@carouselId" class="carousel slide" data-bs-ride="carousel">

    <div class="carousel-indicators">
        @while (buttons < maxItems)
        {
            buttons += 1;
            <button type="button" data-bs-target="#@carouselId" data-bs-slide-to="@(buttons - 1)" class="active" aria-label="Slide @buttons"></button>
        }
    </div>

    <div class="carousel-inner">
        @{
            var typedMultiNodeTreePicker = Model.Content.Value<IEnumerable<IPublishedContent>>("links");
        }
        @if (typedMultiNodeTreePicker != null)
        {
            @foreach (var item in row.Images)
            {
                if (count == maxItems)
                {
                    break;
                }
                count++;
                // make current item have a class of active
                var active = count == 1 ? "active" : "";
                <div class="carousel-item @active">
                    <img src="@item.Url()" class="d-block w-100" alt="...">
                    <div class="carousel-caption d-none d-md-block bg-dark p-3 rounded-3">
                        <h5><a class="nav-link stretched-link" href="@item.Url()">@item.Value("pageTitle")</a></h5>
                        <p>@item.Name</p>
                        <p>
                            @(count) of @(maxItems)
                        </p>
                    </div>
                </div>
            }
        }
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#@carouselId" data-bs-slide="prev">
        <span class="carousel-control-prev-icon bg-secondary rounded-1" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#@carouselId" data-bs-slide="next">
        <span class="carousel-control-next-icon bg-secondary rounded-1" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>




